openapi: 3.0.0
info:
  title: On It API
  description: REST API for On It
  version: 0.1.0

servers:
  - url: https://onitapp.herku.com/api

components:
  securitySchemes:
    token:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    packet:
      type: object
      description: The packaging in which all API responses are sent.
      properties:
        success:
          type: boolean
        payload:
          type: object
        meta:
          type: object
    User:
      type: object
      properties:
        uid:
          type: string
        settings:
          $ref: "#/components/schemas/Settings"
        Projects:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/Project"
        createdAt:
          type: number
          description: The date at which the user was added.
        updatedAt:
          type: number
          description: The last time the user was updated.
    Name:
      type: object
      properties:
        first:
          type: string
          maxLength: 50
          minLength: 1
        last:
          type: string
          maxLength: 50
          minLength: 1
        display:
          type: string
          maxLength: 50
          minLength: 3
    Settings:
      type: object
    Project:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
          maxLength: 6
          minLength: 6
    Task:
      type: object
      properties:
        uid:
          type: string
          description: Owning User ID
        tid:
          type: string
          description: this Task's
        parent:
          type: string
          description: ID of parent task
          default: null
        text:
          type: string
          maxLength: 255
          minLength: 1
          description: The name or title of the task. A shorthand
        due:
          type: number
          description: The date this task is due.
        reminders:
          type: array
          description: An array of dates for reminders
          items:
            type: number
        state:
          type: string
          enum:
            - todo
            - done
            - cancelled
        pinned:
          type: boolean
          description: Whether this task is pinned to the top of lists
          default: false
        tags:
          type: array
          maxItems: 50
          items:
            type: string
            maxLength: 255
            minLength: 1
    Note:
      type: object
      description: A note
      properties:
        uid:
          type: string
          description: Owning user ID
        parent:
          type: string
          description: The ID of the owning task
        nid:
          type: string
          description: Note's ID
        title:
          type: string
          maxLength: 255
        text:
          type: string
          maxLength: 5120
        tags:
          type: array
          maxLength: 50
          items:
            type: string
            maxLength: 255
            minLength: 1
        createdAt:
          type: number
        updatedAt:
          type: number

tags:
  - name: user
    description: Routes used for accessing & modifying user data
  - name: task
    description: Routes used for accessing & modifying user tasks
  - name: note
  - name: project
    description: Routes relating to projects (tags)

paths:
  /users/{uid}:
    get:
      description: Get a user
      tags:
        - user
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
    delete:
      description: Delete a user
      tags:
        - user
      parameters:
        - name: uid
          description: The User ID to delete
          in: path
          required: true
          schema:
            type: string
        - name: token
          description: Auth token
          in: header
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted
        401:
          description: Unauthorized
        404:
          description: User not found
  /users/{uid}/settings:
    summary: Route for creating and editing Projects
  /projects/{uid}:
    get:
      description: Get all projects
      tags:
        - project
      parameters:
        - name: uid
          description: Owning User ID
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: A user's projects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: "#/components/schemas/Project"
    post:
      description: Add a new project
      tags:
        - project
      parameters:
        - name: uid
          description: Owning User ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        201:
          description: Project created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      project:
                        $ref: "#/components/schemas/Project"
    put:
      description: Update a project
      tags:
        - project
      responses:
        200:
          description: TODO
    delete:
      description: Delete a project
      tags:
        - project
      responses:
        200:
          description: TODO

  /tasks/{uid}:
    get:
      description: get a user's tasks
      tags:
        - task
      parameters:
        - name: uid
          description: User ID
          in: path
          required: true
          schema:
            type: string
        - name: limit
          description: Max number of results
          in: query
          schema:
            type: number
            maximum: 300
            default: 100
        - name: state
          description: The completion state of the tasks
          in: query
          schema:
            type: string
            default: null
            enum:
              - todo
              - done
              - cancelled
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: "#/components/schemas/Task"
    post:
      description: Creates a new task
      tags:
        - task
      parameters:
        - name: uid
          description: Owning user ID
          in: path
          required: true
          schema:
            type: string
        - name: token
          description: Auth token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: The task to create
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                due:
                  type: number
                reminders:
                  type: array
                  default: []
                  items:
                    type: number
                tags:
                  type: array
                  maxItems: 50
                  items:
                    type: string
      responses:
        201:
          description: Task created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
  /tasks/{uid}/{tid}:
    summary: Route for accessing a specific task and it's child tasks
    get:
      description: Gets a user's task
      tags:
        - task
      parameters:
        - name: uid
          description: Owning user ID
          in: path
          required: true
          schema:
            type: string
        - name: tid
          description: Task ID
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the Task matching the given ID
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
    put:
      description: Updates a task
      tags:
        - task
      requestBody:
        content:
          application/json:
            schema:
              properties:
                parent:
                  type: string
                  description: ID of parent task
                title:
                  type: string
                text:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Task updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      task:
                        $ref: "#/components/schemas/Task"
    delete:
      description: Deletes a task
      tags:
        - task
      responses:
        200:
          description: Task deleted
        401:
          description: Unauthorized
        404:
          description: Task not found

  /notes/{uid}:
    summary: Route for creating notes, getting (many) notes
    get:
      description: Get a user's notes
      tags:
        - note
      parameters:
        - name: uid
          description: Owning user ID
          in: path
          required: true
          schema:
            type: string
        - name: limit
          description: Max number of results
          in: query
          schema:
            type: number
            maximum: 300
            default: 100
      responses:
        200:
          description: Returns up to {limit} number of the user's notes
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      notes:
                        type: array
                        items:
                          $ref: "#components/schemas/Note"
    post:
      description: Create a new Note
      tags:
        - note
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: Homework notes
                text:
                  type: string
                  example: make sure to use the 4th edition textbook
                tags:
                  type: array
                  items:
                    type: string
                  example: ["project 1"]
                tid:
                  type: string
                  description: Parent task ID
                  example: tidafgkp
      responses:
        201:
          description: Note created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      note:
                        $ref: "#/components/schemas/Note"
  /notes/{uid}/{nid}:
    get:
      description: Get a single note by ID
      tags:
        - note
      parameters:
        - name: uid
          description: Owning User ID
          in: path
          required: true
          schema:
            type: string
        - name: nid
          description: Note ID
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the requested note
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      note:
                        $ref: "#/components/schemas/Note"
    put:
      description: Update a note
      tags:
        - note
      parameters:
        - name: uid
          description: Owning User ID
          in: path
          required: true
          schema:
            type: string
        - name: nid
          description: Note ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Note"
      responses:
        200:
          description: Note updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/packet"
                properties:
                  payload:
                    type: object
                    properties:
                      note:
                        $ref: "#/components/schema/packet"
    delete:
      description: Delete a note
      tags:
        - note
      parameters:
        - name: uid
          description: Owning User ID
          in: path
          required: true
          schema:
            type: string
        - name: nid
          description: Note ID
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Note Deleted
